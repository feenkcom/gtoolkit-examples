"
I am example that further stores the result of evaluating the example.


"
Class {
	#name : #GtExampleWithResult,
	#superclass : #Object,
	#instVars : [
		'example',
		'result',
		'announcer'
	],
	#category : #'GToolkit-Examples-Runtime'
}

{ #category : #jsonV3 }
GtExampleWithResult class >> leJsonV4AttributeMapping [ 

	^ { 
		#simplifiedResult -> #result.
	}
]

{ #category : #accessing }
GtExampleWithResult class >> leJsonV4Name [ 

	^ #gtExampleWithResult
]

{ #category : #comparing }
GtExampleWithResult >> = anExample [
	^ self class = anExample class and: [ 
		self example = anExample example ]
]

{ #category : #accessing }
GtExampleWithResult >> announcer [
	<return: #Announcer>
	^ announcer ifNil: [ announcer := Announcer new ]
]

{ #category : #accessing }
GtExampleWithResult >> announcer: anAnnouncer [
	self 
		assert: [ anAnnouncer isNotNil ]
		description: [ 'Example Announcer must be non-nil' ].
	announcer := anAnnouncer
]

{ #category : #accessing }
GtExampleWithResult >> asExampleWithResult [
	^ self
]

{ #category : #testing }
GtExampleWithResult >> canBeExecuted [
	"Return true if example can be executed"
	<return: #Boolean>
	^ self example canBeExecuted
]

{ #category : #accessing }
GtExampleWithResult >> changeArguments: aCollection [
	(self example changeArguments: aCollection) ifFalse: [ ^ self ].
	self notifyArgumentsChanged. 
	
]

{ #category : #ui }
GtExampleWithResult >> color [
	<return: #Color>
	^ self result 
			ifNotNil: #color
			ifNil: [ Color fromHexString: #'f0f0f0' ]
]

{ #category : #public }
GtExampleWithResult >> debug [
	self result: self example debug
]

{ #category : #accessing }
GtExampleWithResult >> directDependencies [
	^ self example directDependencies collect: #asExampleWithResult
]

{ #category : #accessing }
GtExampleWithResult >> example [
	^ example
]

{ #category : #accessing }
GtExampleWithResult >> example: anObject [
	example := anObject
]

{ #category : #'private - serialization' }
GtExampleWithResult >> exampleSton [

	^ STON toString: example
]

{ #category : #'private - serialization' }
GtExampleWithResult >> exampleSton: aString [

	example := STON fromString: aString.

]

{ #category : #accessing }
GtExampleWithResult >> gtConnectionsFor: aView [
	<gtView>
	^ self example gtConnectionsFor: aView
]

{ #category : #accessing }
GtExampleWithResult >> gtDependenciesGraphFor: aView [
	<gtView>
	^ self example gtDependenciesGraphFor: aView
]

{ #category : #printing }
GtExampleWithResult >> gtDisplayOn: stream [
	self example gtDisplayOn: stream
]

{ #category : #ui }
GtExampleWithResult >> gtExampleFor: aView [
	<gtView>
	
	^ aView forward
		title: 'Example';
		priority: 10;
		object: [ example ];
		view: #gtLiveFor:
]

{ #category : #ui }
GtExampleWithResult >> gtInspectorActions [
	^ super gtInspectorActions addAll: self example gtInspectorActions; yourself
]

{ #category : #ui }
GtExampleWithResult >> gtInspectorPresentationsIn: composite inContext: aGTInspector [
	"we collect all presentations from the wrapped example"
	super gtInspectorPresentationsIn: composite inContext: aGTInspector.
	self example gtInspectorPresentationsIn: composite inContext: aGTInspector
]

{ #category : #ui }
GtExampleWithResult >> gtLiveFor: aView [
	<gtView>
	
	^ aView forward
		title: 'Result';
		priority: 15;
		object: [ result ];
		view: #gtLiveFor:
]

{ #category : #testing }
GtExampleWithResult >> hasAnnouncer [
	^ announcer isNotNil
]

{ #category : #testing }
GtExampleWithResult >> hasNoTestPragma [
	^ self example hasNoTestPragma
]

{ #category : #testing }
GtExampleWithResult >> hasResult [
	^ result notNil
]

{ #category : #comparing }
GtExampleWithResult >> hash [
	^ self class hash bitXor: self example hash
]

{ #category : #ui }
GtExampleWithResult >> icon [
	<return: #Form>
	^ self result 
			ifNotNil: #icon
			ifNil: [ ThemeIcons current iconNamed: #testNotRun ]
]

{ #category : #testing }
GtExampleWithResult >> ignoreTest [
	^ self example ignoreTest
]

{ #category : #testing }
GtExampleWithResult >> isError [
	^ self hasResult and: [ self result isError ]
]

{ #category : #testing }
GtExampleWithResult >> isFailure [
	^ self hasResult and: [ self result isFailure ]
]

{ #category : #accessing }
GtExampleWithResult >> isMethodDefined [
	^ self example isMethodDefined
]

{ #category : #testing }
GtExampleWithResult >> isSuccess [
	^ self hasResult and: [ self result isSuccess ]
]

{ #category : #accessing }
GtExampleWithResult >> method [
	^ self example method
]

{ #category : #accessing }
GtExampleWithResult >> methodClass [
	^ self example methodClass
]

{ #category : #accessing }
GtExampleWithResult >> methodPackage [
	<return: #RPackage>
	^ self example methodPackage
]

{ #category : #accessing }
GtExampleWithResult >> noTest [
	^ self example noTest
]

{ #category : #notifying }
GtExampleWithResult >> notifyArgumentsChanged [
	| anAnnouncement |
	self hasAnnouncer ifFalse: [ ^ self ].
	anAnnouncement := GtExampleArgumentsChanged new example: self.
	self announcer announce: anAnnouncement.
]

{ #category : #notifying }
GtExampleWithResult >> notifyExampleExecuted [
	| anAnnouncement |
	self hasAnnouncer ifFalse: [ ^ self ].
	anAnnouncement := GtExampleExecuted new example: self.
	self announcer announce: anAnnouncement.
]

{ #category : #accessing }
GtExampleWithResult >> numberOfRequieredArguments [
	<return: #Integer>
	^ self example numberOfRequieredArguments
]

{ #category : #public }
GtExampleWithResult >> openDebugger [
	self result: self example openDebugger
]

{ #category : #accessing }
GtExampleWithResult >> openingDebugger [
	<return: #GtExampleOpenDebugger>
	^ self example openingDebugger
		callback: [ :anExampleResult | self result: anExampleResult ]
]

{ #category : #accessing }
GtExampleWithResult >> result [
	<return: #GtExampleResult>
	^ result
]

{ #category : #accessing }
GtExampleWithResult >> result: aGtExampleResult [
	result == aGtExampleResult ifTrue: [ ^ self ].
	result := aGtExampleResult.
	self notifyExampleExecuted
]

{ #category : #printing }
GtExampleWithResult >> resultOrErrorName [

	^ self hasResult
		  ifTrue: [ self result returnValue class name asString ]
		  ifFalse: [ 'N/A' ]
]

{ #category : #accessing }
GtExampleWithResult >> returnValue [
	^ self result returnValue
]

{ #category : #public }
GtExampleWithResult >> run [
	<return: #GtExampleResult>
	self result: self example run.
	^ self result.
]

{ #category : #accessing }
GtExampleWithResult >> selector [
	^ self example selector
]

{ #category : #'private - serialization' }
GtExampleWithResult >> simplifiedResult [

	result ifNotNil: [ result beSafeSimplifiedExampleResultValue ].
	^ result
]

{ #category : #'private - serialization' }
GtExampleWithResult >> simplifiedResult: aResultValue [

	result := aResultValue.
	example := aResultValue example.
]

{ #category : #accessing }
GtExampleWithResult >> sourceCode [
	<return: #String>
	^ self example sourceCode
]

{ #category : #printing }
GtExampleWithResult >> statusText [
	self hasResult
		ifTrue: [ self isSuccess
			ifTrue: [ ^ 'Success' ]
			ifFalse: [ 
				self isError ifTrue: [ ^ 'Error' ].
				self isFailure ifTrue: [ ^ 'Failure' ].
				 ^ 'Problem' ] ]
		ifFalse: [ ^ 'N/A' ]
]

{ #category : #printing }
GtExampleWithResult >> statusTextWithResultValueClassName [
	| status resultOrErrorClassName |
	status := self statusText.
	resultOrErrorClassName := self resultOrErrorName.
	resultOrErrorClassName ifNotNil: [ status := status , ': ' , resultOrErrorClassName ].
	^ status
]
